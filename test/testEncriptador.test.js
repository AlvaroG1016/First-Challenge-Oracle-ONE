// Generated by CodiumAI



/*
Code Analysis

Objective:
The encriptador function aims to receive a text input, normalize it, replace vowels with specific strings, and display the resulting text in a div element while clearing the input text area. 

Inputs:
- A string of text to be encrypted.

Flow:
1. Check if the input text is not empty.
2. Remove diacritical marks and normalize the input text to lowercase.
3. Replace vowels with specific strings using a callback function.
4. Set the resulting text as the inner text of a div element.
5. Clear the input text area.

Outputs:
- Encrypted text displayed in a div element.

Additional aspects:
- The function uses regular expressions to remove diacritical marks and replace vowels.
- If the input text is empty, an alert message is displayed.
- The function uses an object to map vowels to their corresponding replacement strings.
*/



describe('encriptador_function', () => {

    // Tests that the function correctly encrypts a valid input string and displays it in divInnerText. 
    it("test_valid_string", () => {
        // Arrange
        const input = "FSADÄáasdsggga#@";
        const expectedOutput = "faisdenterimesdoboberaiufatufatga#@";
        divInnerText = document.createElement("div");
        textArea = document.createElement("textarea");
        document.body.appendChild(divInnerText);
        document.body.appendChild(textArea);

        // Act
        encriptador(input);

        // Assert
        expect(divInnerText.innerText).toBe(expectedOutput);
    });

    // Tests that the function displays an alert when an empty string is passed as argument. 
    it("test_empty_string", () => {
        // Arrange
        const input = "";
        const expectedOutput = "Debes Digitar algo";
        divInnerText = document.createElement("div");
        textArea = document.createElement("textarea");
        document.body.appendChild(divInnerText);
        document.body.appendChild(textArea);

        // Act
        encriptador(input);

        // Assert
        expect(window.alert).toHaveBeenCalledWith(expectedOutput);
    });

    // Tests that the function correctly handles special characters and non-Latin characters in the input string. 
    it("test_special_characters", () => {
        // Arrange
        const input = "¡Hola, mundo!";
        const expectedOutput = "enterholai, mundobober";
        divInnerText = document.createElement("div");
        textArea = document.createElement("textarea");
        document.body.appendChild(divInnerText);
        document.body.appendChild(textArea);

        // Act
        encriptador(input);

        // Assert
        expect(divInnerText.innerText).toBe(expectedOutput);
    });

    // Tests that the function clears the textArea after execution. 
    it("test_clear_textarea", () => {
        // Arrange
        const input = "Hola, mundo";
        divInnerText = document.createElement("div");
        textArea = document.createElement("textarea");
        textArea.value = input;
        document.body.appendChild(divInnerText);
        document.body.appendChild(textArea);

        // Act
        encriptador(input);

        // Assert
        expect(textArea.value).toBe("");
    });

    // Tests that the function checks if divInnerText exists before assigning it. 
    it("test_divInnerText_existence", () => {
        // Arrange
        const input = "Hola, mundo";
        divInnerText = null;
        textArea = document.createElement("textarea");
        textArea.value = input;
        document.body.appendChild(textArea);

        // Act and Assert
        expect(() => encriptador(input)).toThrow();
    });

    // Tests that the function checks if textArea exists before assigning it. 
    it("test_textArea_existence", () => {
        // Arrange
        const input = "Hola, mundo";
        divInnerText = document.createElement("div");
        textArea = null;
        document.body.appendChild(divInnerText);

        // Act and Assert
        expect(() => encriptador(input)).toThrow();
    });
});
